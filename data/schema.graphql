# A book object
type Book implements Node {
  # The title of the book
  title: String

  # The chapters of the book
  chapters(before: String, after: String, first: Int, last: Int): ChapterConnectionConnection

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type BookConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [BookConnectionEdge]
}

# An edge in a connection
type BookConnectionEdge {
  # The item at the end of the edge
  node: Book

  #  cursor for use in pagination
  cursor: String!
}

# The chapter of the book
type Chapter implements Node {
  # The text content of the chapter
  text: String

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type ChapterConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [ChapterConnectionEdge]
}

# An edge in a connection
type ChapterConnectionEdge {
  # The item at the end of the edge
  node: Chapter

  #  cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
}

type User {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  book: Book
  chapter(id: Int): Chapter
  books: BookConnectionConnection
}
